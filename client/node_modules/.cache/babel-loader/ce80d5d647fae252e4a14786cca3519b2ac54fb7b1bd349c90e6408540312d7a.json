{"ast":null,"code":"// API configuration utility\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Helper function to make API calls\nexport const apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    }\n  };\n  const config = {\n    ...defaultOptions,\n    ...options,\n    headers: {\n      ...defaultOptions.headers,\n      ...options.headers\n    }\n  };\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n// Specific API functions\nexport const chatAPI = {\n  sendMessage: (message, language, userId, sessionId) => apiCall('/chat/message', {\n    method: 'POST',\n    body: JSON.stringify({\n      message,\n      language,\n      userId,\n      sessionId\n    })\n  }),\n  getSupportedLanguages: () => apiCall('/chat/languages'),\n  detectLanguage: text => apiCall('/chat/detect-language', {\n    method: 'POST',\n    body: JSON.stringify({\n      text\n    })\n  })\n};\nexport const alertsAPI = {\n  getActiveAlerts: params => {\n    const queryString = new URLSearchParams(params).toString();\n    return apiCall(`/alerts/active?${queryString}`);\n  }\n};\nexport const analyticsAPI = {\n  getOverview: range => apiCall(`/analytics/overview?range=${range}`)\n};\nexport default {\n  apiCall,\n  chatAPI,\n  alertsAPI,\n  analyticsAPI\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiCall","endpoint","options","url","defaultOptions","headers","config","response","fetch","ok","Error","status","data","json","error","console","chatAPI","sendMessage","message","language","userId","sessionId","method","body","JSON","stringify","getSupportedLanguages","detectLanguage","text","alertsAPI","getActiveAlerts","params","queryString","URLSearchParams","toString","analyticsAPI","getOverview","range"],"sources":["/Users/juneahmed/gramcare/client/src/utils/api.js"],"sourcesContent":["// API configuration utility\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Helper function to make API calls\nexport const apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const defaultOptions = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n  };\n\n  const config = {\n    ...defaultOptions,\n    ...options,\n    headers: {\n      ...defaultOptions.headers,\n      ...options.headers,\n    },\n  };\n\n  try {\n    const response = await fetch(url, config);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n// Specific API functions\nexport const chatAPI = {\n  sendMessage: (message, language, userId, sessionId) => \n    apiCall('/chat/message', {\n      method: 'POST',\n      body: JSON.stringify({\n        message,\n        language,\n        userId,\n        sessionId\n      })\n    }),\n    \n  getSupportedLanguages: () => \n    apiCall('/chat/languages'),\n    \n  detectLanguage: (text) => \n    apiCall('/chat/detect-language', {\n      method: 'POST',\n      body: JSON.stringify({ text })\n    })\n};\n\nexport const alertsAPI = {\n  getActiveAlerts: (params) => {\n    const queryString = new URLSearchParams(params).toString();\n    return apiCall(`/alerts/active?${queryString}`);\n  }\n};\n\nexport const analyticsAPI = {\n  getOverview: (range) => \n    apiCall(`/analytics/overview?range=${range}`)\n};\n\nexport default { apiCall, chatAPI, alertsAPI, analyticsAPI };"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACvD,MAAMC,GAAG,GAAG,GAAGP,YAAY,GAAGK,QAAQ,EAAE;EAExC,MAAMG,cAAc,GAAG;IACrBC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGH,OAAO,CAACG;IACb;EACF,CAAC;EAED,MAAMC,MAAM,GAAG;IACb,GAAGF,cAAc;IACjB,GAAGF,OAAO;IACVG,OAAO,EAAE;MACP,GAAGD,cAAc,CAACC,OAAO;MACzB,GAAGH,OAAO,CAACG;IACb;EACF,CAAC;EAED,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEG,MAAM,CAAC;IAEzC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG;EACrBC,WAAW,EAAEA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,KAChDrB,OAAO,CAAC,eAAe,EAAE;IACvBsB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBP,OAAO;MACPC,QAAQ;MACRC,MAAM;MACNC;IACF,CAAC;EACH,CAAC,CAAC;EAEJK,qBAAqB,EAAEA,CAAA,KACrB1B,OAAO,CAAC,iBAAiB,CAAC;EAE5B2B,cAAc,EAAGC,IAAI,IACnB5B,OAAO,CAAC,uBAAuB,EAAE;IAC/BsB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEG;IAAK,CAAC;EAC/B,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG;EACvBC,eAAe,EAAGC,MAAM,IAAK;IAC3B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,OAAOlC,OAAO,CAAC,kBAAkBgC,WAAW,EAAE,CAAC;EACjD;AACF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG;EAC1BC,WAAW,EAAGC,KAAK,IACjBrC,OAAO,CAAC,6BAA6BqC,KAAK,EAAE;AAChD,CAAC;AAED,eAAe;EAAErC,OAAO;EAAEgB,OAAO;EAAEa,SAAS;EAAEM;AAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}