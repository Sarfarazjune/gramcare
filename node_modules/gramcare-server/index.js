const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const dotenv = require('dotenv');
const twilio = require('twilio');
const helmet = require('helmet');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const http = require('http'); // Import http module
const WebSocket = require('ws'); // Import WebSocket library
require('dotenv').config();

const chatRoutes = require('./routes/chat');
const alertRoutes = require('./routes/alerts');
const analyticsRoutes = require('./routes/analytics');
const whatsappRoutes = require('./routes/whatsapp');
const vaccinationRoutes = require('./routes/vaccination');
const symptomCheckerRoutes = require('./routes/symptomChecker');
const outbreakDetectionRoutes = require('./routes/outbreakDetection');
const smsRoutes = require('./routes/sms');
const { getAIResponse, isHealthRelated } = require('./utils/aiService');

const app = express();
const server = http.createServer(app); // Create HTTP server
const wss = new WebSocket.Server({ server }); // Create WebSocket server
const PORT = process.env.PORT || 5001;

// WebSocket connection handling
wss.on('connection', ws => {
  console.log('Client connected via WebSocket');

  ws.on('message', message => {
    console.log(`Received message from client: ${message}`);
    // Handle incoming WebSocket messages if needed
  });

  ws.on('close', () => {
    console.log('Client disconnected from WebSocket');
  });

  ws.on('error', error => {
    console.error('WebSocket error:', error);
  });
});

// Function to broadcast messages to all connected WebSocket clients
const broadcastMessage = (message) => {
  wss.clients.forEach(client => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(message));
    }
  });
};

// Security middleware
app.use(helmet());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});
app.use('/api/', limiter);

// CORS configuration
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://your-domain.com'] 
    : ['http://localhost:3000'],
  credentials: true
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Logging middleware
app.use(morgan('combined'));

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API Routes
app.use('/api/chat', chatRoutes);
app.use('/api/alerts', alertRoutes);
app.use('/api/analytics', analyticsRoutes);
app.use('/api/whatsapp', whatsappRoutes);
app.use('/api/vaccination', vaccinationRoutes);
app.use('/api/symptom-checker', symptomCheckerRoutes);
app.use('/api/outbreak-detection', outbreakDetectionRoutes);
app.use('/api/sms', smsRoutes);

app.post('/whatsapp', async (req, res) => {
  const MessagingResponse = twilio.twiml.MessagingResponse;
  const twiml = new MessagingResponse();

  const incomingMsg = req.body.Body;
  const from = req.body.From;

  console.log(`Incoming message from ${from}: ${incomingMsg}`);

  // AI response logic re-enabled as per instruction
  let aiResponseText = "";
  try {
    const aiResponse = await getAIResponse(incomingMsg, 'en', process.env.PREFERRED_AI_SERVICE || 'auto');
    if (aiResponse.success) {
      aiResponseText = aiResponse.response;
    } else {
      aiResponseText = "Sorry, I couldn't process your request at the moment. Please try again later.";
    }
  } catch (error) {
    console.error('Error getting AI response:', error);
    aiResponseText = "An error occurred while processing your request.";
  }

  // Automatically append the disclaimer
  const disclaimer = "\n\nThis is informational only, not a medical diagnosis.";
  const fullResponse = aiResponseText + disclaimer;
  twiml.message(fullResponse);

  // Broadcast the AI response to connected WebSocket clients
  broadcastMessage({ type: 'whatsapp_message', from, message: incomingMsg, response: fullResponse });

  res.writeHead(200, {'Content-Type': 'text/xml'});
  res.end(twiml.toString());
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('Error:', err.stack);
  
  if (err.type === 'entity.parse.failed') {
    return res.status(400).json({
      error: 'Invalid JSON format',
      message: 'Please check your request body'
    });
  }
  
  res.status(err.status || 500).json({
    error: process.env.NODE_ENV === 'production' 
      ? 'Internal server error' 
      : err.message,
    timestamp: new Date().toISOString()
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Route not found',
    message: `The requested route ${req.originalUrl} does not exist`,
    availableRoutes: ['/api/chat', '/api/alerts', '/api/analytics', '/api/whatsapp']
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM received. Shutting down gracefully...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT received. Shutting down gracefully...');
  process.exit(0);
});

// Start server
server.listen(PORT, () => {
  console.log(`ðŸš€ GramCare Server running on port ${PORT}`);
  console.log(`ðŸ“± Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`ðŸ”— API Base URL: http://localhost:${PORT}/api`);
  console.log(`ðŸ“Š Health Check: http://localhost:${PORT}/health`);
});

module.exports = app;